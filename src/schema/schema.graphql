"""
Tezos address. Represented as public key hash (Base58Check-encoded) prefixed with tz1, tz2, tz3 or KT1.
"""
scalar Address

"""
Timestamp specified as a ISO-8601 UTC date string (2020-02-04T15:31:39Z)
"""
scalar DateTime

"""
JSON represents any valid JSON object
"""
scalar JSON

"""
Raw Michelson expression represented as JSON
"""
scalar MichelsonExpression

"""
Arbitrary precision number represented as string in JSON.
"""
scalar BigNumber

"""
Micro tez. Positive bignumber. 1 tez = 1,000,000 micro tez.
"""
scalar Mutez

"""
Operation identifier (Base58Check-encoded) prefixed with o.
"""
scalar OperationHash

"""
Block identifier (Base58Check-encoded) prefixed with B.
"""
scalar BlockHash

"""
Protocol identifier (Base58Check-encoded) prefixed with P.
"""
scalar ProtocolHash

"""
Context identifier (Base58Check-encoded) prefixed with Co.
"""
scalar ContextHash

"""
Operations identifier (Base58Check-encoded) prefixed with LLo (List of a list of operations).
"""
scalar OperationsHash

"""
Chain identifier (Base58Check-encoded) prefixed with Net.
"""
scalar ChainId

"""
Generic signature (Base58Check-encoded) prefixed with sig.
"""
scalar Signature

"""
Public key (Base58Check-encoded) prefixed with edpk, sppk or p2pk.
"""
scalar PublicKey

"""
Nonce hash (Base58Check-encoded).
"""
scalar NonceHash

"""
Block identifier. Hash (Base58Check-encoded), level (specified as a number), relative pointer (head~n) and head are allowed.

Examples of valid block identifiers:
"head"
946213 (level - specified as a number)
"head~4" (5th block relative to head)
"BMX2db8rN3MczS9urDdS8Hh6Q7UyGve3631t2YwzunU3VDddoJf" (hash)
"""
scalar BlockIdentifier

schema {
    query: Query,
    subscription: Subscription
}

type Query {
    """
    Fetches a block by hash (Base58Check-encoded) from tezos.
    If neither is supplied, the most recent known block (head) is returned.
    """
    block(block: BlockIdentifier): Block

    """
    Fetches most recent known block (head) from cache.
    If neither is supplied, the most recent known block (head) is returned.
    """
    head: [Block]

    operations: [OperationNotification!]!
    activations: [ActivationNotification!]!
    ballots: [BallotNotification!]!
    delegations: [DelegationNotification!]!
    doubleBakingEvidences: [DoubleBakingEvidenceNotification!]!
    doubleEndorsementEvidences: [DoubleEndorsementEvidenceNotification!]!
    endorsements: [EndorsementNotification!]!
    originations: [OriginationNotification!]!
    proposals: [ProposalsNotification!]!
    reveals: [RevealNotification!]!
    newSeedNonceRevelations: [SeedNonceRevelationNotification!]!
    transactions: [TransactionNotification!]!
}

type Subscription {
    """
    Pushes block header additions from blockchain.
    """
    monitorBlockHeaderAdded: MonitorBlockHeaderNotification

    """
    Pushes operation additions from block.
    """
    operationAdded: OperationNotification

    # """
    # Pushes activation additions from block. Can be filtered by address.
    # """
    activationAdded(address: Address): ActivationNotification

    # """
    # Pushes ballot additions from block. Can be filtered by source, proposal and vote.
    # """
    ballotAdded(source: Address, proposal: ProtocolHash, ballot: BallotVote): BallotNotification

    # """
    # Pushes delegation additions from block. Can be filtered by source, delegate and operation result status.
    # """
    delegationAdded(source: Address, delegate: Address, status: OperationResultStatus): DelegationNotification

    # """
    # Pushes double baking evidence additions from block. Can be filtered by delegate.
    # """
    doubleBakingEvidenceAdded(delegate: Address): DoubleBakingEvidenceNotification
    
    # """
    # Pushes double endorsement evidence additions from block. Can be filtered by delegate.
    # """
    doubleEndorsementEvidenceAdded(delegate: Address): DoubleEndorsementEvidenceNotification

    # """
    # Pushes endorsement additions from block. Can be filtered by delegate.
    # """
    endorsementAdded(delegate: Address): EndorsementNotification

    # """
    # Pushes origination additions from block. Can be filtered by source, delegate, originated contract and operation result status.
    # """
    originationAdded(source: Address, delegate: Address, originatedContract: Address, status: OperationResultStatus): OriginationNotification

    # """
    # Pushes proposals additions from block. Can be filtered by source and proposal hash.
    # """
    proposalsAdded(source: Address, proposal: ProtocolHash): ProposalsNotification

    # """
    # Pushes reveal additions from block. Can be filtered by source or operation result status.
    # """
    revealAdded(source: Address, status: OperationResultStatus): RevealNotification

    # """
    # Pushes seed nonce revelation additions from block. Can be filtered by delegate.
    # """
    seedNonceRevelationAdded(delegate: Address): SeedNonceRevelationNotification

    # """
    # Pushes transaction additions from block. Can be filtered by source and destination.
    # """
    transactionAdded(source: Address, destination: Address): TransactionNotification
}

"""
Subscription related type definitions
NOTE: notification types are used for transfering partial data through pubsub to clients
"""
type MonitorBlockHeaderNotification {
    data: MonitorBlockHeader!
}

type OperationNotification {
    key: String!
    data: OperationContents!
}

type ActivationNotification {
    data: ActivateAccount!
}

type BallotNotification {
    data: Ballot!
}

type DelegationNotification {
    data: Delegation!
}

type DoubleBakingEvidenceNotification {
    data: DoubleBakingEvidence!
}

type DoubleEndorsementEvidenceNotification {
    data: DoubleEndorsementEvidence!
}

type EndorsementNotification {
    data: Endorsement!
}

type OriginationNotification {
    data: Origination!
}

type ProposalsNotification {
    data: Proposals!
}

type RevealNotification {
    data: Reveal!
}

type SeedNonceRevelationNotification {
    data: SeedNonceRevelation!
}

type TransactionNotification {
    data: Transaction!
}

"""
Tezos block. See https://tezos.gitlab.io/api/rpc.html#get-block-id
"""
type Block {
    """
    Tezos protocol ID (Base58Check-encoded)
    """
    protocol: ProtocolHash!

    """
    The network identifier (Base58Check-encoded)
    """
    chain_id: ChainId!

    """
    The block's unique identifier (Base58Check-encoded)
    """
    hash: BlockHash!

    """
    Associated header object.
    """
    header: BlockHeader!

    """
    Associated metadata object.
    """
    metadata: BlockMetadata!

    """
    All operations in this block as returned from the Tezos node
    """
    operations: [[OperationEntry]]
}

"""
A monitor block header payload.
"""
type MonitorBlockHeader {
    hash: String
    level: Int
    proto: Int
    predecessor: BlockHash
    timestamp: DateTime
    validation_pass: Int
    operations_hash: OperationsHash
    fitness: [String]
    context: ContextHash
    protocol_data: String
}

"""
A block header. See https://tezos.gitlab.io/api/rpc.html#get-block-id-header
"""
type BlockHeader {
    level: Int!
    proto: Int!
    predecessor: BlockHash!
    timestamp: DateTime!
    validation_pass: Int!
    operations_hash: OperationsHash
    fitness: [String!]!
    context: ContextHash!
    priority: Int!
    proof_of_work_nonce: String!
    seed_nonce_hash: NonceHash
    signature: Signature!
}

"""
Block metadata. See https://tezos.gitlab.io/api/rpc.html#get-block-id-metadata
"""
type BlockMetadata {
    protocol: ProtocolHash!
    next_protocol: ProtocolHash!
    test_chain_status: TestChainStatus!
    max_operations_ttl: Int!
    max_operation_data_length: Int!
    max_block_header_length: Int!
    max_operation_list_length: [MaxOperationListLength!]
    baker: Address!
    level: Level!
    voting_period_kind: VotingPeriodKind!
    nonce_hash: NonceHash
    consumed_gas: BigNumber
    deactivated: [Address!]
    balance_updates: [BalanceUpdate!]
}

"""
Contains information about the block's level.
"""
type Level {
    """
    The level of the block relative to genesis. This is also the Shell's notion of level
    """
    level: Int!

    """
    The level of the block relative to the block that starts protocol alpha
    """
    level_position: Int!

    """
    The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of protocol alpha.
    """
    cycle: Int!

    """
    The current level of the block relative to the first block of the current cycle.
    """
    cycle_position: Int!

    """
    The current voting period's index. Note that cycles are a protocol-specific notion. As a result, the voting period index starts at 0 with the first block of protocol alpha.
    """
    voting_period: Int!

    """
    The current level of the block relative to the first block of the current voting period.
    """
    voting_period_position: Int!

    """
    Tells whether the baker of this block has to commit a seed nonce hash.
    """
    expected_commitment: Boolean!
}

"""
Status of the test chain
"""
type TestChainStatus {
    """
    The status value: notRunning (there is no test chain at the moment), forking (the test chain is being setup),
    running (the test chain is running).
    """
    status: TestChainStatusType!
}

type MaxOperationListLength {
    max_size: Int!
    max_op: Int
}

enum BalanceUpdateKind {
    contract
    freezer
}

enum BalanceUpdateCategory {
    deposits
    fees
    rewards
}

"""
Everything about a delegate. See https://tezos.gitlab.io/api/rpc.html#get-block-id-context-delegates-pkh
"""
type Delegate {
    """
    The full balance of a given delegate, including the frozen balances.
    """
    balance: Mutez!

    """
    The total frozen balances of a given delegate, this includes the frozen deposits, rewards and fees.
    """
    frozen_balance: Mutez!

    """
    Returns the frozen balances of a given delegate, indexed by the cycle by which it will be unfrozen.
    """
    frozen_balance_by_cycle: [FrozenBalanceByCycle!]!

    """
    The total amount of tokens delegated to a given delegate. This includes the balances of all the contracts that delegate to it,
    but also the balance of the delegate itself and its frozen fees and deposits. The rewards do not count in the delegated balance until they are unfrozen.
    """
    staking_balance: Mutez!

    """
    The list of contracts that delegate to a given delegate.
    """
    delegated_contracts: [Address!]!

    """
    The balances of all the contracts that delegate to a given delegate. This excludes the delegate's own balance and its frozen balances.
    """
    delegated_balance: Mutez!

    """
    Tells whether the delegate is currently tagged as deactivated or not.
    """
    deactivated: Boolean!

    """
    The cycle by the end of which the delegate might be deactivated if she fails to execute any delegate action. A deactivated delegate might be reactivated
    (without loosing any rolls) by simply re-registering as a delegate. For deactivated delegates, this value contains the cycle by which they were deactivated.
    """
    grace_period: Int!
}

type BakingRight {
    level: Int!
    delegate: Address!
    priority: Int!

    """
    Omitted for levels in the past, and only an estimate for levels later that the next block, based on the hypothesis that all predecessor blocks were baked at the first priority.
    """
    estimated_time: DateTime
}

type EndorsingRight {
    level: Int!
    delegate: Address!
    slots: [Int]!

    """
    Omitted for levels in the past, and only an estimate for levels later that the next block, based on the hypothesis that all predecessor blocks were baked at the first priority.
    """
    estimated_time: DateTime
}

"""
Frozen balance of a given delegate, indexed by the cycle by which it will be unfrozen
"""
type FrozenBalanceByCycle {
    cycle: Int!
    deposit: Mutez!
    fees: Mutez!
    rewards: Mutez!
}

"""
All constants
"""
type Constants {
    bakingRewardPerEndorsement: [BigNumber]
    blockSecurityDeposit: Mutez
    blocksPerCommitment: Int
    blocksPerCycle: Int
    blocksPerRollSnapshot: Int
    blocksPerVotingPeriod: Int
    costPerByte: Mutez
    delayPerMissingEndorsement: BigNumber
    endorsementReward: [Mutez]
    endorsementSecurityDeposit: Mutez
    endorsersPerBlock: Int
    hardGasLimitPerBlock: BigNumber
    hardGasLimitPerOperation: BigNumber
    hardStorageLimitPerOperation: BigNumber
    initialEndorsers: Int
    maxOperationDataLength: Int
    maxProposalsPerDelegate: Int
    maxRevelationsPerBlock: Int
    michelsonMaximumTypeSize: Int
    minProposalQuorum: Int
    nonceLength: Int
    originationSize: Int
    preservedCycles: Int
    proofOfWorkNonceSize: Int
    proofOfWorkThreshold: BigNumber
    quorumMax: Int
    quorumMin: Int
    seedNonceRevelationTip: Mutez
    testChainDuration: BigNumber
    timeBetweenBlocks: [BigNumber]
    tokensPerRoll: Mutez
    """
    Pre Carthaganet
    """
    blockReward: BigNumber
}

"""
Information about a smart contract.
"""
type Contract {
    """
    The unique address (public key hash).
    """
    address: Address!

    """
    The balance of the contract.
    """
    balance: Mutez!

    """
    Script belonging to the contract.
    """
    script: ScriptedContracts

    """
    The counter of the contract, if any
    """
    counter: BigNumber

    """
    Entrypoint information of the contract
    """
    entrypoints: Entrypoints

    """
    The delegate of the contract, if any
    """
    delegate: Address

    """
    The manager of the contract.
    """
    manager_key: ManagerKey

    """
    Storage in Michelson format.
    """
    storage: MichelsonExpression

    """
    Decoded version of the storage.
    """
    storage_decoded: JSON

    """
    JSON representation of the storage schema.
    """
    schema: JSON
}

"""
One of the currently supported key types used for fetching bigMap values.
"""
enum BigMapKeyType {
    string
    nat
    int
    bytes
    bool
    mutez
    address
    key_hash
}

"""
Manager of a contract.
"""
type ManagerKey {
    """
    The public key
    """
    key: PublicKey!

    """
    Validity flag
    """
    invalid: Boolean
}

"""
Information about entrypoints in a contract.
"""
type Entrypoints {
    """
    List of entrypoints
    """
    entrypoints: JSON!

    unreachable: [EntrypointUnreachable!]
}

type EntrypointUnreachable {
    path: [String!]!
}

"""
Code and storage a contract
"""
type ScriptedContracts {
    """
    The code of the script
    """
    code: [MichelsonExpression!]!

    """
    The current storage value in Michelson format
    """
    storage: MichelsonExpression!
}

type OperationEntry {
    info: OperationEntryInfo!
    contents: [OperationContents!]!
}

type OperationEntryInfo {
    protocol: ProtocolHash!
    chain_id: ChainId!
    hash: OperationHash!
    branch: BlockHash!
    signature: Signature
}

interface OperationContents {
    kind: OperationKind!
    operation: OperationEntryInfo!
}

enum OperationKind {
    activate_account
    ballot
    delegation
    double_baking_evidence
    double_endorsement_evidence
    endorsement
    origination
    proposals
    reveal
    seed_nonce_revelation
    transaction
}

type Endorsement implements OperationContents {
    # kind is always 'endorsement'
    kind: OperationKind!
    level: Int!
    metadata: EndorsementMetadata!
    operation: OperationEntryInfo!
}

type EndorsementMetadata {
    balance_updates: [BalanceUpdate!]!
    delegate: Address!
    slots: [Int!]!
}

type SeedNonceRevelation implements OperationContents {
    # kind is always 'seed_nonce_revelation'
    kind: OperationKind!
    level: Int!
    nonce: String!
    metadata: OperationContentMetadata!
    operation: OperationEntryInfo!
}

type DoubleEndorsementEvidence implements OperationContents {
    # kind is always 'double_endorsement_evidence'
    kind: OperationKind!
    op1: InlinedEndorsement!
    op2: InlinedEndorsement!
    metadata: OperationContentMetadata!
    operation: OperationEntryInfo!
}

type InlinedEndorsement {
    branch: BlockHash!
    operations: InlinedEndorsementContents!
    signature: Signature
}

type InlinedEndorsementContents {
    # kind is always 'endorsement'
    kind: OperationKind!
    level: Int!
}

type OperationContentMetadata {
    balance_updates: [BalanceUpdate!]!
}

type DoubleBakingEvidence implements OperationContents {
    # kind is always 'double_baking_evidence'
    kind: OperationKind!
    bh1: BlockHeader!
    bh2: BlockHeader!
    metadata: OperationContentMetadata!
    operation: OperationEntryInfo!
}

type ActivateAccount implements OperationContents {
    # kind is always 'activate_account'
    kind: OperationKind!
    pkh: Address!
    secret: String!
    metadata: OperationContentMetadata!
    operation: OperationEntryInfo!
}

type Reveal implements OperationContents {
    # kind is always 'reveal'
    kind: OperationKind!
    source: Address!
    fee: Mutez!
    counter: BigNumber!
    gas_limit: BigNumber!
    storage_limit: BigNumber!
    public_key: PublicKey!
    metadata: RevealMetadata!
    operation: OperationEntryInfo!
}

type RevealMetadata {
    balance_updates: [BalanceUpdate!]!
    internal_operation_results: [InternalOperationResult!]
    operation_result: RevealOperationResult!
}

type RevealOperationResult implements OperationResult {
    status: OperationResultStatus!
    consumed_gas: BigNumber
    errors: [OperationError!]
}

type Transaction implements OperationContents {
    # kind is always 'transaction'
    kind: OperationKind!
    source: Address!
    fee: Mutez!
    counter: BigNumber!
    gas_limit: BigNumber!
    storage_limit: BigNumber!
    amount: Mutez!
    destination: Address!
    parameters: MichelsonExpression
    metadata: TransactionMetadata!
    operation: OperationEntryInfo!
}

type TransactionMetadata {
    balance_updates: [BalanceUpdate!]!
    operation_result: TransactionOperationResult!
    internal_operation_results: [InternalOperationResult!]
}

type TransactionOperationResult implements OperationResult {
    status: OperationResultStatus!
    consumed_gas: BigNumber
    errors: [OperationError!]
    storage: MichelsonExpression
    big_map_diff: [BigMapDiffItem!]
    balance_updates: [BalanceUpdate!]
    originated_contracts: [Address!]
    storage_size: BigNumber
    paid_storage_size_diff: BigNumber
    allocated_destination_contract: Boolean
}

type BigMapDiffItem {
    key_hash: String!
    key: MichelsonExpression!
    value: MichelsonExpression
}

type Delegation implements OperationContents {
    # kind is always 'delegation'
    kind: OperationKind!
    source: Address!
    fee: Mutez!
    counter: BigNumber!
    gas_limit: BigNumber!
    storage_limit: BigNumber!
    delegate: Address
    metadata: DelegationMetadata!
    operation: OperationEntryInfo!
}

type DelegationMetadata {
    balance_updates: [BalanceUpdate!]!
    operation_result: DelegationOperationResult!
    internal_operation_results: [InternalOperationResult!]
}

type DelegationOperationResult implements OperationResult {
    status: OperationResultStatus!
    consumed_gas: BigNumber
    errors: [OperationError!]
}

type Origination implements OperationContents {
    # kind is always 'origination'
    kind: OperationKind!
    source: Address!
    fee: Mutez!
    counter: BigNumber!
    gas_limit: BigNumber!
    storage_limit: BigNumber!
    balance: Mutez!
    delegate: Address
    script: ScriptedContracts
    metadata: OriginationMetadata!
    operation: OperationEntryInfo!
}

type OriginationMetadata {
    balance_updates: [BalanceUpdate!]!
    operation_result: OriginationOperationResult!
    internal_operation_results: [InternalOperationResult!]
}

type OriginationOperationResult implements OperationResult {
    status: OperationResultStatus!
    consumed_gas: BigNumber
    errors: [OperationError!]
    balance_updates: [BalanceUpdate!]
    originated_contracts: [Address!]
    storage_size: BigNumber
    paid_storage_size_diff: BigNumber
}

type Proposals implements OperationContents {
    # kind is always 'proposals'
    kind: OperationKind!
    source: Address!
    period: Int!
    proposals: [ProtocolHash!]!
    metadata: JSON
    operation: OperationEntryInfo!
}

type Ballot implements OperationContents {
    # kind is always 'ballot'
    kind: OperationKind!
    source: Address!
    period: Int!
    proposal: ProtocolHash!
    ballot: BallotVote!
    metadata: JSON
    operation: OperationEntryInfo!
}

enum BallotVote {
    nay
    pass
    yay
}

type BalanceUpdate {
    kind: BalanceUpdateKind!
    category: BalanceUpdateCategory
    contract: Address
    delegate: Address
    cycle: Int
    change: BigNumber!
}

type InternalOperationResult {
    kind: InternalOperationKind!
    source: Address!
    nonce: Int!
    amount: Mutez
    destination: Address
    parameters: TransactionOperationParameter
    public_key: PublicKey
    balance: Mutez
    delegate: Address
    script: ScriptedContracts
    result: OperationResult!
}

enum InternalOperationKind {
    delegation
    origination
    reveal
    transaction
}

type TransactionOperationParameter {
    entrypoint: String!
    value: MichelsonExpression!
}

interface OperationResult {
    status: OperationResultStatus!
    consumed_gas: BigNumber
    errors: [OperationError!]
}

enum OperationResultStatus {
    applied
    backtracked
    failed
    skipped
}

type OperationError {
    kind: String!
    id: String!
}

enum TestChainStatusType {
    not_running
    forking
    running
}

enum VotingPeriodKind {
    proposal
    testing_vote
    testing
    promotion_vote
}