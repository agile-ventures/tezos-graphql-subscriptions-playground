******************************************************************************************
// subscribe to monitor block header
subscription {
  monitorBlockHeaderAdded {
    data {
      hash,
      level,
      proto,
      predecessor,
      timestamp,
      validation_pass,
      operations_hash,
      fitness,
      context,
      protocol_data
    }
  }
}

******************************************************************************************
// subscribe to all operations
subscription {
  operationAdded {
    key,
    data {
      ... on Transaction {
        kind,
        source,
        fee,
        counter,
        gas_limit,
        storage_limit,
        amount,
        destination,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          operation_result {
            status
          },
          internal_operation_results {
            kind
          }
        }
      }
      ... on Endorsement {
        kind,
        level,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          delegate,
          slots
        }
      }
    }
  }
}

******************************************************************************************
// subscribe to activations
subscription {
  activationAdded {
    data {
      pkh,
      secret
    }
  }
}

// subscribe to activations for specific address
subscription onActivationAdded($address: Address) {
  activationAdded(address: $address) {
    data {
      pkh,
      secret
    }
  }
}

QUERY VARIABLES:
{
  "address": "tz1RNwBwVmTJjNRnAcfaPet6b74ZR7NEFikA"
}

******************************************************************************************
// subscribe to ballots
subscription {
  ballotAdded {
    data {
      source,
      period,
      proposal,
      ballot
    }
  }
}

// subscribe to ballots for specific source, proposal and ballot
subscription onBallotAdded($source: Address, $proposal: ProtocolHash, $ballot: BallotVote) {
  ballotAdded(source: $source, proposal: $proposal, ballot: $ballot) {
    data {
      source,
      period,
      proposal,
      ballot
    }
  }
}

QUERY VARIABLES:
{
  "source": "tz1RNwBwVmTJjNRnAcfaPet6b74ZR7NEFikA",
  "proposal": "ooKbZZduz2M9mXgnG2YqcFh3mjCQ2N2o9TBWfXK2fuzf6Fh5h4M",
  "ballot": "PASS"
}

******************************************************************************************
// subscribe to delegations
subscription {
  delegationAdded {
    data {
      source,
      fee,
      counter,
      gas_limit,
      storage_limit,
      delegate
    }
  }
}

// subscribe to delegations for specific source and delegate
subscription onDelegationAdded($source: Address, $delegate: Address) {
  delegationAdded(source: $source, delegate: $delegate) {
    data {
      source,
      fee,
      counter,
      gas_limit,
      storage_limit,
      delegate
    }
  }
}

QUERY VARIABLES:
{
  "source": "tz1RNwBwVmTJjNRnAcfaPet6b74ZR7NEFikA",
  "delegate": "tz1RNwBwVmTJjNRnAcfaPet6b74ZR7NEFikA"
}

******************************************************************************************
// subscribe to double baking evidence
subscription {
  doubleBakingEvidenceAdded {
    data {
      bh1 {
        level,
        timestamp
      },
      bh2 {
        level,
        timestamp
      }
    }
  }
}

// subscribe to double baking evidence for specific delegate
subscription onDoubleBakingEvidenceAdded($delegate: Address) {
  doubleBakingEvidenceAdded(delegate: $delegate) {
    data {
      bh1 {
        level,
        timestamp
      },
      bh2 {
        level,
        timestamp
      }
    }
  }
}

QUERY VARIABLES:
{
  "delegate": "tz1X7fu4GXBXp9A8fchu1px3zzMDKtagDBk3"
}

******************************************************************************************
// subscribe to double endorsement evidence
subscription {
  doubleEndorsementEvidenceAdded {
    data {
      op1 {
        branch,
        signature
      },
      op2 {
        branch,
        signature
      }
    }
  }
}

// subscribe to double endorsement evidence for specific delegate
subscription onDoubleEndorsementEvidenceAdded($delegate: Address) {
  doubleEndorsementEvidenceAdded(delegate: $delegate) {
    data {
      op1 {
        branch,
        signature
      },
      op2 {
        branch,
        signature
      }
    }
  }
}

QUERY VARIABLES:
{
  "delegate": "tz1X7fu4GXBXp9A8fchu1px3zzMDKtagDBk3"
}

******************************************************************************************
// subscribe to endorsements
subscription {
  endorsementAdded {
    data {
      kind,
      level,
			metadata {
        balance_updates {
          kind,
          category,
          contract,
          delegate,
          cycle,
          change
        },
        delegate,
        slots
      },
      operation {
        protocol,
        chain_id,
        hash,
        branch,
        signature
      }
    }
  }
}

// subscribe to endorsements for specific delegate
subscription onEndorsementAdded($delegate: Address) {
  endorsementAdded(delegate: $delegate) {
    data {
      kind,
      level,
			metadata {
        balance_updates {
          kind,
          category,
          contract,
          delegate,
          cycle,
          change
        },
        delegate,
        slots
      },
      operation {
        protocol,
        chain_id,
        hash,
        branch,
        signature
      }
    }
  }
}

QUERY VARIABLES:
{
  "delegate": "tz1RNwBwVmTJjNRnAcfaPet6b74ZR7NEFikA"
}

******************************************************************************************
// subscribe to originations
subscription {
  originationAdded {
    data {
      source,
      delegate
    }
  }
}

// subscribe to originations for specific source, delegate, originated contract and status
subscription onOriginationAdded($source: Address, $delegate: Address, $originatedContract: Address, $status: OperationResultStatus) {
  originationAdded(source: $source, delegate: $delegate, originatedContract: $originatedContract, status: $status) {
    data {
      source,
      delegate
    }
  }
}

QUERY VARIABLES:
{
  "source": "tz1X7fu4GXBXp9A8fchu1px3zzMDKtagDBk3",
  "delegate": "tz1W5kSd1Evb7AzJGbTmDNniS35yDYsz28c5",
  "originatedContract": "ooKbZZduz2M9mXgnG2YqcFh3mjCQ2N2o9TBWfXK2fuzf6Fh5h4M",
  "status": "APPLIED"
}

******************************************************************************************
// subscribe to proposals
subscription {
  proposalsAdded {
    data {
      source,
      period,
      proposals
    }
  }
}

// subscribe to proposals for specific source and proposal
subscription onProposalsAdded($source: Address, $proposal: ProtocolHash) {
  proposalsAdded(source: $source, proposal: $proposal) {
    data {
      source,
      period,
      proposals
    }
  }
}

QUERY VARIABLES:
{
  "source": "tz1X7fu4GXBXp9A8fchu1px3zzMDKtagDBk3",
  "proposal": "ooKbZZduz2M9mXgnG2YqcFh3mjCQ2N2o9TBWfXK2fuzf6Fh5h4M"
}

******************************************************************************************
// subscribe to reveals
subscription {
  revealAdded {
    data {
      source
    }
  }
}

// subscribe to reveals for specific source and status
subscription onRevealAdded($source: Address, $status: OperationResultStatus) {
  revealAdded(source: $source, status: $status) {
    data {
      source
    }
  }
}

QUERY VARIABLES:
{
  "source": "tz1X7fu4GXBXp9A8fchu1px3zzMDKtagDBk3",
  "status": "APPLIED"
}

******************************************************************************************
// subscribe to seed nonce revelations
subscription {
  seedNonceRevelationAdded {
    data {
      level,
      nonce
    }
  }
}

// subscribe to seed nonce revelations for specific delegate
subscription onSeedNonceRevelationAdded($delegate: Address) {
  seedNonceRevelationAdded(delegate: $delegate) {
    data {
      level,
      nonce
    }
  }
}

QUERY VARIABLES:
{
  "delegate": "tz1X7fu4GXBXp9A8fchu1px3zzMDKtagDBk3"
}

******************************************************************************************
// subscribe to transactions
subscription {
  transactionAdded {
    data {
      source,
      fee,
      counter,
      gas_limit,
      storage_limit,
      amount,
      destination,
      parameters,
      metadata {
        balance_updates {
          kind,
          category,
          contract,
          delegate,
          cycle,
          change
        },
        operation_result {
          status,
          consumed_gas,
          errors {
            kind,
            id
          },
          storage,
          big_map_diff {
            key_hash,
            key,
            value
          },
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          originated_contracts,
          storage_size,
          paid_storage_size_diff,
          allocated_destination_contract
        },
        internal_operation_results {
          kind,
          source,
          nonce,
          amount,
          destination,
          parameters {
            entrypoint,
            value
          },
          public_key,
          balance,
          delegate,
          script {
            code,
            storage
          }
        },
        
      },
      operation {
        protocol,
        chain_id,
        hash,
        branch,
        signature
      }
    }
  }
}

// subscribe to transactions for specific source and destination addresses
subscription onTransactionAdded($source: Address, $destination: Address) {
  transactionAdded(source: $source, destination: $destination) {
    data {
      source,
      fee,
      counter,
      gas_limit,
      storage_limit,
      amount,
      destination,
      parameters,
      metadata {
        balance_updates {
          kind,
          category,
          contract,
          delegate,
          cycle,
          change
        },
        operation_result {
          status,
          consumed_gas,
          errors {
            kind,
            id
          },
          storage,
          big_map_diff {
            key_hash,
            key,
            value
          },
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          originated_contracts,
          storage_size,
          paid_storage_size_diff,
          allocated_destination_contract
        },
        internal_operation_results {
          kind,
          source,
          nonce,
          amount,
          destination,
          parameters {
            entrypoint,
            value
          },
          public_key,
          balance,
          delegate,
          script {
            code,
            storage
          }
        },
        
      },
      operation {
        protocol,
        chain_id,
        hash,
        branch,
        signature
      }
    }
  }
}

QUERY VARIABLES:
{
  "source": "tz1RNwBwVmTJjNRnAcfaPet6b74ZR7NEFikA",
  "destination": "tz1W5kSd1Evb7AzJGbTmDNniS35yDYsz28c5"
}

*****************************************************************************************
// current head in cache
query {
  head {
    protocol,
    chain_id,
    hash,
    header {
      level,
      proto,
      predecessor,
      timestamp,
      operations_hash,
      fitness,
      context,
      priority,
      seed_nonce_hash,
      signature
    },
    metadata {
      protocol,
      max_operation_list_length {
        max_size,
        max_op
      },
      baker,
      level {
        level,
        cycle
      }
    }
  }
}

*****************************************************************************************
// block by hask or level
query ($block: BlockIdentifier) {
  block (block: $block) {
    hash,
    chain_id,
    hash,
    header {
      level,
      proto,
      predecessor,
      timestamp,
      validation_pass,
      operations_hash,
      fitness,
      context,
      priority,
      proof_of_work_nonce,
      seed_nonce_hash,
      signature
    },
    metadata {
      protocol,
      next_protocol,
      test_chain_status {
        status
      },
      max_operations_ttl,
      max_operation_data_length,
      max_block_header_length,
      max_operation_list_length {
        max_size,
        max_op
      },
      baker,
      level {
        level
      },
      voting_period_kind,
      nonce_hash,
      consumed_gas,
      deactivated,
      balance_updates {
        kind
      }
    }
  }
}

QUERY VARIABLES:
{
  "block": "1158489"
}

*****************************************************************************************
// generic operations in cache
query {
  operations {
    key,
    data {
      ... on Endorsement {
        kind,
        level,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          delegate,
          slots
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }
      ... on SeedNonceRevelation {
        kind,
        level,
        nonce,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          }
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }
      ... on DoubleEndorsementEvidence {
        kind,
        op1 {
          branch,
          operations {
            kind,
            level
          }
          signature
        },
        op2 {
          branch,
          operations {
            kind,
            level
          },
          signature
        },
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          }
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }
      ... on DoubleBakingEvidence {
        kind,
        bh1 {
          level,
          proto,
          predecessor,
          timestamp,
          validation_pass,
          operations_hash,
          fitness,
          context,
          priority,
          proof_of_work_nonce,
          seed_nonce_hash,
          signature
        },
        bh2 {
          level,
					proto,
          predecessor,
          timestamp,
          validation_pass,
          operations_hash,
          fitness,
          context,
          priority,
          proof_of_work_nonce,
          seed_nonce_hash,
          signature
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }      
      }
      ... on ActivateAccount {
        kind,
      	pkh,
      	secret,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          }
        },
        operation {
          protocol,
          chain_id,
         	hash,
          branch,
          signature
        }
      }
			... on Reveal {
        kind,
        source,
        fee,
        counter,
        gas_limit,
        storage_limit,
        public_key,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          internal_operation_results {
            kind,
            source,
            nonce,
            amount,
            destination,
            parameters {
              entrypoint,
              value
            },
            public_key,
            balance,
            delegate,
            script {
              code,
              storage
            },
            result {
              ... on RevealOperationResult {
                status,
                consumed_gas,
                errors {
                  kind,
                  id
                }
              }
            }
          }
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }
      ... on Transaction {
        kind,
        source,
        fee,
        counter,
        gas_limit,
        storage_limit,
        amount,
        destination,
        parameters,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          operation_result {
            ... on TransactionOperationResult {
              status,
              consumed_gas,
              errors {
                kind,
                id
              },
              storage,
              big_map_diff {
                key_hash,
                key,
                value
              },
              balance_updates {
                kind,
                category,
                contract,
                delegate,
                cycle,
                change
              },
              originated_contracts,
              storage_size,
              paid_storage_size_diff,
              allocated_destination_contract
            }
          }
          internal_operation_results {
            kind,
            source,
            nonce,
            amount,
            destination,
            parameters {
              entrypoint,
              value
            },
            public_key,
            balance,
            delegate,
            script {
              code,
              storage
            }
          }
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }
      ... on Delegation {
        kind,
        source,
        fee,
        counter,
        gas_limit,
        storage_limit,
        delegate,
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          operation_result {
            status,
            consumed_gas,
            errors {
              kind,
              id
            }
          },
          internal_operation_results {
            kind,
            source,
            nonce,
            amount,
            destination,
            parameters {
              entrypoint,
              value
            },
            public_key,
            balance,
            delegate,
            script {
              code,
              storage
            },
            result {
              ... on DelegationOperationResult {
                status,
                consumed_gas,
                errors {
                  kind,
                  id
                }
              }
            }
          }
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }
      ... on Origination {
        kind,
        source,
        fee,
        counter,
        gas_limit,
        storage_limit,
        balance,
        delegate,
        script {
          code,
          storage
        },
        metadata {
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          operation_result {
            status,
            consumed_gas,
            errors {
              kind,
              id
            },
            balance_updates {
              kind,
              category,
              contract,
              delegate,
              cycle,
              change
            },
            originated_contracts,
            storage_size,
            paid_storage_size_diff
          },
          internal_operation_results {
            kind,
            source,
            nonce,
            amount,
            destination,
            parameters {
              entrypoint,
              value
            },
            public_key,
            balance,delegate,
            script {
              code,
              storage
            },
            result {
              ... on OriginationOperationResult {
                status,
                consumed_gas,
                errors {
                  kind,
                  id
                },
                balance_updates {
                  kind,
                  category,
                  contract,
                  delegate,
                  cycle,
                  change
                },
                originated_contracts,
                storage_size,
                paid_storage_size_diff
              }
            }
          }
        },
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }    
      }
      ... on Proposals {
        kind,
        source,
        period,
        proposals,
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }
      ... on Ballot {
        kind,
        source,
        period,
        proposal,
        ballot,
        operation {
          protocol,
          chain_id,
          hash,
          branch,
          signature
        }
      }      
    }
  }
}

*****************************************************************************************
// endorsements in cache
query {
  endorsements {
    data {
      kind,
      level,
			metadata {
        balance_updates {
          kind,
          category,
          contract,
          delegate,
          cycle,
          change
        },
        delegate,
        slots
      },
      operation {
        protocol,
        chain_id,
        hash,
        branch,
        signature
      }
    }
  }
}

******************************************************************************************
// transactions in cache
query {
  transactions {
    data {
      kind,
      source,
      fee,
      counter,
      gas_limit,
      storage_limit,
      amount,
      destination,
      parameters,
      metadata {
        balance_updates {
          kind,
          category,
          contract,
          delegate,
          cycle,
          change
        },
        operation_result {
          status,
          consumed_gas,
          errors {
            kind,
            id
          },
          storage,
          big_map_diff {
            key_hash,
            key,
            value
          },
          balance_updates {
            kind,
            category,
            contract,
            delegate,
            cycle,
            change
          },
          originated_contracts,
          storage_size,
          paid_storage_size_diff,
          allocated_destination_contract
        },
        internal_operation_results {
          kind,
          source,
          nonce,
          amount,
          destination,
          parameters {
            entrypoint,
            value
          },
          public_key,
          balance,
          delegate,
          script {
            code,
            storage
          }
        },
        
      },
      operation {
        protocol,
        chain_id,
        hash,
        branch,
        signature
      }
    }
  }
}

******************************************************************************************